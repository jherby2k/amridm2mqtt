#!/usr/bin/env python3
'''
Runs rtlamr to watch for IDM/SCM/SCM+ broadcasts from power meter. If meter id
is in the list, usage is sent to 'amr/reading/SCM/{meter id}/message'
topic on the MQTT broker specified in settings.

WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.

'''
import os
import subprocess
import signal
import sys
import time
import paho.mqtt.publish as publish
import settings
import json

# uses signal to shutdown and hard kill opened processes and self
def shutdown(signum, frame):
    send_mqtt('amr/status/availability', 'offline')
    rtltcp.send_signal(15)
    rtlamr.send_signal(15)
    time.sleep(1)
    rtltcp.send_signal(9)
    rtlamr.send_signal(9)
    sys.exit(0)

signal.signal(signal.SIGTERM, shutdown)
signal.signal(signal.SIGINT, shutdown)

# stores last interval id to avoid duplication, includes getter and setter
last_reading = {}

auth = None

if len(settings.MQTT_USER) and len(settings.MQTT_PASSWORD):
	auth = {'username':settings.MQTT_USER, 'password':settings.MQTT_PASSWORD}

DEBUG=os.environ.get('DEBUG', '').lower() in ['1', 'true', 't']

def debug_print(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)

def get_last_interval(meter_id):
    return last_reading.get(meter_id, (None))

def set_last_interval(meter_id, interval_ID):
    last_reading[meter_id] = (interval_ID)

# send data to MQTT broker defined in settings
def send_mqtt(topic, payload,):
    try:
        publish.single(topic, payload=payload, qos=1, hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth, retain=True)
    except Exception as ex:
        print("MQTT Publish Failed: " + str(ex))

# start the rtl_tcp program
rtltcp = subprocess.Popen([settings.RTL_TCP + " > /dev/null 2>&1 &"], shell=True,
    stdin=None, stdout=None, stderr=None, close_fds=True)
time.sleep(5)
debug_print('started rtl_tcp')

# start the rtlamr program.
rtlamr_cmd = [settings.RTLAMR, '--msgtype=' + settings.RTLAMR_MSGTYPE, '--format=json']
rtlamr = subprocess.Popen(rtlamr_cmd, stdout=subprocess.PIPE, universal_newlines=True)
debug_print('started rtlamr')

# Let listeners know we are available
send_mqtt('amr/status/availability', 'online')

# Hack to enable Home Assistant last_reset_topic
# See https://github.com/home-assistant/core/issues/53988
send_mqtt('amr/status/last_reset', '1970-01-01T00:00:00+00:00')

while True:
    try:
        amrline = rtlamr.stdout.readline().strip()
        flds = json.loads(amrline)

        # There is a message type called SCM+ which needs to be renamed SCMplus
        msgType = flds['Type'].replace('+','plus')
        msgBody = flds['Message']

        meter_id = 'unknown'
        meter_type = 0

        if msgType == 'SCM':
            meter_id = msgBody['ID']
            meter_type = msgBody['Type']
        elif msgType == 'SCMplus':
            meter_id = msgBody['EndpointID']
            meter_type = msgBody['EndpointType']
        elif msgType == 'IDM':
            meter_id = msgBody['ERTSerialNumber']
            meter_type = msgBody['ERTType']
        else:
            meter_id = flds['Time']
            debug_print('Unhandled msgType {}'.format(msgType))

        # make sure the meter id is one we want
        if settings.WATCHED_METERS and meter_id not in settings.WATCHED_METERS:
            continue

        # Send the whole message to a dynamically configured topic
        send_mqtt('amr/reading/{}/{}/{}/message'.format(msgType, meter_type, meter_id), amrline)

    except Exception as e:
        debug_print('Exception squashed! {}: {}', e.__class__.__name__, e)
        time.sleep(2)
